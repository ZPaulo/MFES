class SISPTest

instance variables

operations

	protected assertEqual: ? * ? ==> ()
	assertEqual(expected, actual) == 
		if expected <> actual then (
			 	IO`print("Actual value (");
  			IO`print(actual); 
  			IO`print(") different from expected (");
  			IO`print(expected);
  			IO`println(")\n")
			
		)
	;
	--tests if publications are added to the author's publications set when they are created
	private testAddPublication: () ==> ()
		testAddPublication() ==
		(
			dcl a1 : Author := new Author("a1");
			dcl p1 : Publication;
			dcl p2 : Publication;
			
			
			assertEqual({},a1.getPublications());
			
			p1 := new Publication("p1", mk_Publication`Date(1,2,3), {a1}, {}, {a1 |-> "FEUP"});
			assertEqual({p1},a1.getPublications());
			
			p2 := new Publication("p2", mk_Publication`Date(1,2,4), {a1}, {p1}, {a1 |-> "ISEP"});
			assertEqual({p1,p2},a1.getPublications());
		);
	
	--tests if interests are added to an author's interests set
	private testAddInterest: () ==> ()
		testAddInterest() ==
		(
			dcl a1 : Author := new Author("a1");
			
			
			assertEqual({},a1.getInterests());
			
			a1.addInterest("Tecnologia");
			assertEqual({"Tecnologia"},a1.getInterests());
			
			a1.addInterest("Pesca");
			assertEqual({"Tecnologia","Pesca"},a1.getInterests());
		);	
			
	--tests if the number of self citations and other citations is correctly calculated
	private testCitations: () ==> ()
		testCitations() ==
		(
			dcl a1 : Author := new Author("a1");
			dcl a2 : Author := new Author("a2");
			dcl p1 : Publication;
			dcl p2 : Publication;
			dcl p3 : Publication;
			
			assertEqual(0,a1.getSelfCit());
			assertEqual(0,a1.getCitatedOther());
			
			p1 := new Publication("p1", mk_Publication`Date(1,2,3), {a1}, {}, {a1 |-> "FEUP"});
			p2 := new Publication("p1", mk_Publication`Date(1,2,4), {a2}, {p1}, {a2 |-> "FEUP"});
			
			
			assertEqual(0,a1.getSelfCit());
			assertEqual(1,a1.getCitatedOther());
			
			
			p3 := new Publication("p3", mk_Publication`Date(1,2,4), {a1}, {p1}, {a1 |-> "FEUP"});
			
			assertEqual(1,a1.getSelfCit());
			assertEqual(1,a1.getCitatedOther());
		);
  
  	--tests if the co-author path is correctly generated and the erdos number correctly calculated
  	private testPath: () ==> ()
		testPath() ==
		(
			dcl sisp : 	SISP := new SISP();
			dcl a1 : Author := new Author("a1");
			dcl a2 : Author := new Author("a2");
			dcl a3 : Author := new Author("a3");
			dcl p1 : Publication;
			dcl p2 : Publication;
			dcl p3 : Publication;
			
			sisp.addAuthor(a1);
			sisp.addAuthor(a2);
			sisp.addAuthor(a3);
			
			assertEqual([],sisp.getCoAuthorPath(a1,a2));
			assertEqual(0,sisp.getErdosNumber(a1,a2));
			
			p1 := new Publication("p1", mk_Publication`Date(1,2,3), {a1,a2}, {}, {a1 |-> "FEUP", a2 |-> "ISEP"});
			
			assertEqual([a1,a2],sisp.getCoAuthorPath(a1,a2));
			assertEqual(2,sisp.getErdosNumber(a1,a2));
	
			p2 := new Publication("p2", mk_Publication`Date(1,2,4), {a2,a3}, {}, {a2 |-> "FEUP",a3 |-> "ISEP"});
			
			assertEqual([a1,a2,a3],sisp.getCoAuthorPath(a1,a3));
			assertEqual(3,sisp.getErdosNumber(a1,a3));
			
			p3 := new Publication("p3", mk_Publication`Date(1,2,4), {a1,a3}, {}, {a1 |-> "FEUP", a3 |-> "ISEP"});
			
			assertEqual([a1,a3],sisp.getCoAuthorPath(a1,a3));
			assertEqual(2,sisp.getErdosNumber(a1,a3));
			
		);
		
 	--Tests if dates check correctly and is impossible for a publication to have a reference to a younger publication
 	--breaks pre-condition
	private testDate: () ==> ()
	testDate() ==
	(
		dcl a1 : Author := new Author("a1");
		dcl p1 : Publication;
		dcl p2 : Publication;
		
		p1 := new Publication("p1", mk_Publication`Date(1,2,3), {a1}, {}, {a1 |-> "FEUP"});
		p2 := new Publication("p2", mk_Publication`Date(0,2,1), {a1}, {p1}, {a1 |-> "FEUP"});
	);

	--calls all of the tests
	public static main: () ==> ()
	main() ==
  (
		new SISPTest().testAddPublication();
		new SISPTest().testAddInterest();
		new SISPTest().testCitations();
		new SISPTest().testPath();
		--new SISPTest().testDate();
  );
	
end SISPTest