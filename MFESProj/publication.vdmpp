class Publication
types
	public String = SISP`String;
	public Date = SISP`Date;
instance variables

	private title: String;
	private release_date: Date;
	private authors: set of Author;
	private references: set of Publication; --publications refered by this publication
	private citations: set of Publication; --publications this publication citates
	private citated: set of Publication; --publications that citate this publication
	private affiliations:	map Author to String;

operations
	public Publication: String * Date * set of Author * set of Publication *  set of Publication * map Author to String  ==> Publication
		Publication(name,date,aut,ref,cits,aff) ==
		(
			title:=name;
			release_date := date;
			authors:= aut;
			references:=ref;
			citations:=cits;
			citated:={};
			affiliations:=aff;
			for all c in set citations do
			(
				c.addCitated(self);
			);
		); --TODO definir condiciçoes d criaçao de publicaçao for all citations as c, date < c.date

	
	public pure getAuthors : () ==> set of Author
		getAuthors() ==
			return authors;
	
	public addAuthors : Author ==> ()
		addAuthors(a) ==
			authors := authors union {a}
		pre a not in set authors
		post a in set authors;

	public pure getReferences : () ==> set of Publication
		getReferences() ==
			return references;
	
	public addReference : Publication ==> ()
		addReference(p) ==
			references := references union {p}
		pre p not in set references
		post p in set references;		
	
	public pure getCitations : () ==> set of Publication
		getCitations() ==
			return citations;
	
	public addCitation : Publication ==> ()
		addCitation(p) ==
			citations := citations union {p}
		pre p not in set citations
		post p in set citations;
		
	public pure getCitated : () ==> set of Publication
		getCitated() ==
			return citated;
			
	public addCitated : Publication ==> ()
		addCitated(p) ==
			citated := citated union {p}
		pre p not in set citated
		post p in set citated;
	
		
end Publication